name: CI Workflow

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

env:
  COMPONENT_BUILDER: builder
  COMPONENT_API: api
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ECR_REGION: us-east-2

jobs:

  lint-golangci:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: ">=1.19.0"
      - run: go version

      - name: go fmt
        run: |
          go fmt ./...

      - name: Lint Go code
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  lint-dockerfile:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint builder Dockerfile
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: ./dockerfile/builder/Dockerfile

      - name: Lint api Dockerfile
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: ./dockerfile/api/Dockerfile

  install-go:
    needs: [lint-dockerfile]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: ">=1.19.0"
      - run: go version

  build-push-builder-image:
    needs: [install-go]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if Dockerfile changed
        id: file_changed
        uses: dorny/paths-filter@v2
        with:
          filters: |
            file_changed:
              - 'dockerfile/builder/Dockerfile'
          base: HEAD

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push BUILDER image
        if: steps.file_changed.outputs.file_changed == 'true'
        id: build-image-builder
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.COMPONENT_BUILDER }}
        run: |
          docker build \
            -t $ECR_REGISTRY/${{ env.COMPONENT_BUILDER }}:latest \
            -f ./dockerfile/builder/Dockerfile \
            .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-push-api-image:
    needs: [build-push-builder-image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push API image
        id: build-image-api
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.COMPONENT_API }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f ./dockerfile/api/Dockerfile \
            --build-arg AWS_REGION=${{ env.AWS_ECR_REGION }} \
            .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  update-deployment-using-kustomize:
#     if: github.event_name == 'push'
    needs: [build-push-api-image]
    runs-on: ubuntu-latest
    steps:
      - name: install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin/

      - name: Checkout code from project-nova repo
        uses: actions/checkout@v3
        with:
          path: project-nova

      - name: Checkout code from project-nova-cd repo
        uses: actions/checkout@v3
        with:
          repository: storyprotocol/project-nova-cd
          ref: main
          path: project-nova-cd
          token: ${{ secrets.PAT_TOKEN_FOR_PROJECT_NOVA_CD }}

      - name: Update deployment using kustomize
        run: |
          cd project-nova-cd/deploy/envs/stag
          kustomize edit set image ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_ECR_REGION }}.amazonaws.com/${{ env.COMPONENT_API }}:${{ github.sha }}

      - name: Push changes to project-nova-cd repo
        run: |
          cd project-nova-cd
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "Update deployment using kustomize"
          git push
